package com.domain;
// Generated Apr 16, 2015 12:48:29 PM by Hibernate Tools 4.3.1


import com.domain.enums.InvoiceStatus;
import com.fasterxml.jackson.annotation.*;

import java.math.BigDecimal;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.Type;
import org.joda.time.DateTime;
import org.springframework.format.annotation.DateTimeFormat;

/**
 * Invoice generated by hbm2java
 */
@Entity
@Table(name="invoice"
    ,catalog="revised_cws_db"
)
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Invoice  implements java.io.Serializable {

    @Id @GeneratedValue(strategy=IDENTITY)
    @Column(name="id", unique=true, nullable=false)
    private Long id;
    @OneToOne(fetch=FetchType.EAGER, cascade={CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name="reading_id", nullable=false)
    private MeterReading reading;
    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="account_id", nullable=false)
    private Account account;
    @ManyToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)
    @JoinColumn(name="schedule_id", nullable=false)
    private Schedule schedule;
    @Column(name="gross_charge", nullable=true, precision=9)
    private BigDecimal grossCharge;
    @Column(name="net_charge", nullable=false, precision=9)
    private BigDecimal netCharge;
    @Column(name="penalty", nullable=false, precision=9)
    private BigDecimal penalty;
    @Column(name="others", nullable=false, precision=9)
    private BigDecimal others;
    @Column(name="arrears", nullable=false, precision=9)
    private BigDecimal arrears;
    @Column(name="basic", nullable=false, precision=9)
    private BigDecimal basic;
    @Column(name="sys_loss", nullable=false, precision=9)
    private BigDecimal systemLoss;
    @Column(name="dep_fund", nullable=false, precision=9)
    private BigDecimal depreciationFund;
    @Type(type = "org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    @DateTimeFormat(pattern = "yyyy/MM/dd")
    @Column(name="due_date", nullable=false)
    private DateTime dueDate;
    @Column(name="status", nullable=false)
    @Enumerated(EnumType.STRING)
    private InvoiceStatus status;
    @OneToOne(fetch=FetchType.EAGER, mappedBy="invoice")
    private Payment payment;

    public Invoice() {
    }
    
    public Invoice(Account account, Schedule schedule, BigDecimal grossCharge, 
            BigDecimal netCharge, InvoiceStatus status, BigDecimal arrears, BigDecimal penalty,
            BigDecimal others, DateTime dueDate) {
        this.account = account;
        this.grossCharge = grossCharge;
        this.netCharge = netCharge;
        this.status = status;
        this.schedule = schedule;
        this.penalty = penalty;
        this.others = others;
        this.arrears = arrears;
        this.dueDate = dueDate;
    }

    public Invoice(MeterReading reading, Account account, Schedule schedule, BigDecimal grossCharge, BigDecimal netCharge, BigDecimal penalty, BigDecimal others, BigDecimal arrears, BigDecimal basic, BigDecimal systemLoss, BigDecimal depreciationFund, DateTime dueDate, InvoiceStatus status, Payment payment) {
        this.reading = reading;
        this.account = account;
        this.schedule = schedule;
        this.grossCharge = grossCharge;
        this.netCharge = netCharge;
        this.penalty = penalty;
        this.others = others;
        this.arrears = arrears;
        this.basic = basic;
        this.systemLoss = systemLoss;
        this.depreciationFund = depreciationFund;
        this.dueDate = dueDate;
        this.status = status;
        this.payment = payment;
    }

    
        
    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    @JsonBackReference
    public MeterReading getReading() {
        return reading;
    }
    
    @JsonProperty
    public void setReading(MeterReading reading) {
        this.reading = reading;
    }
    
    @JsonManagedReference
    public Account getAccount() {
        return this.account;
    }
    @JsonProperty
    public void setAccount(Account account) {
        this.account = account;
    }
    
    public BigDecimal getGrossCharge() {
        return this.grossCharge;
    }
    
    public void setGrossCharge(BigDecimal grossCharge) {
        this.grossCharge = grossCharge;
    }

    public BigDecimal getNetCharge() {
        return this.netCharge;
    }
    
    public void setNetCharge(BigDecimal netCharge) {
        this.netCharge = netCharge;
    }

    public InvoiceStatus getStatus() {
        return this.status;
    }
    
    public void setStatus(InvoiceStatus status) {
        this.status = status;
    }
    //@JsonBackReference
    public Payment getPayment() {
        return this.payment;
    }
    @JsonProperty
    public void setPayment(Payment payment) {
        this.payment = payment;
    }
    @JsonManagedReference
    public Schedule getSchedule() {
        return this.schedule;
    }
    @JsonProperty
    public void setSchedule(Schedule schedule) {
        this.schedule = schedule;
    }

    public BigDecimal getPenalty() {
        return penalty;
    }

    public void setPenalty(BigDecimal penalty) {
        this.penalty = penalty;
    }

    public BigDecimal getOthers() {
        return others;
    }

    public void setOthers(BigDecimal others) {
        this.others = others;
    }

    public BigDecimal getArrears() {
        return arrears;
    }

    public void setArrears(BigDecimal arrears) {
        this.arrears = arrears;
    }

    public DateTime getDueDate() {
        return dueDate;
    }

    public void setDueDate(DateTime dueDate) {
        this.dueDate = dueDate;
    }

    public BigDecimal getBasic() {
        return basic;
    }

    public void setBasic(BigDecimal basic) {
        this.basic = basic;
    }

    public BigDecimal getSystemLoss() {
        return systemLoss;
    }

    public void setSystemLoss(BigDecimal systemLoss) {
        this.systemLoss = systemLoss;
    }

    public BigDecimal getDepreciationFund() {
        return depreciationFund;
    }

    public void setDepreciationFund(BigDecimal depreciationFund) {
        this.depreciationFund = depreciationFund;
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers
                // if deriving: appendSuper(super.hashCode()).
                        append(this.id).
                        toHashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Invoice other = (Invoice) obj;
        return new EqualsBuilder().
                append(this.id, other.id).
                isEquals();
    }
}