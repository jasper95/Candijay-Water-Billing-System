package com.domain;
// Generated Apr 16, 2015 12:48:29 PM by Hibernate Tools 4.3.1


import com.dao.util.StandardDateTimeSerializer;
import com.domain.enums.InvoiceStatus;
import com.fasterxml.jackson.annotation.*;

import java.math.BigDecimal;
import java.util.Set;
import javax.persistence.*;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;

import static javax.persistence.GenerationType.IDENTITY;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.Type;
import org.joda.time.DateTime;
import org.springframework.format.annotation.DateTimeFormat;

/**
 * Invoice generated by hbm2java
 */
@Entity
@Table(name="invoice")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Invoice  implements java.io.Serializable {

    @Id @GeneratedValue(strategy=IDENTITY)
    @Column(name="id", unique=true, nullable=false)
    private Long id;
    @OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name="reading_id", nullable=false)
    private MeterReading reading;
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="account_id", nullable=false)
    private Account account;
    @ManyToOne(fetch=FetchType.EAGER, cascade={CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name="schedule_id", nullable=false)
    private Schedule schedule;
    @Column(name="gross_charge", precision=9)
    private BigDecimal grossCharge;
    @Column(name="net_charge", nullable=false, precision=9)
    private BigDecimal netCharge;
    @Column(name="remaining_total", nullable=false, precision=9)
    private BigDecimal remainingTotal;
    @Column(name="penalty", nullable=false, precision=9)
    private BigDecimal penalty;
    @Column(name="others", nullable=false, precision=9)
    private BigDecimal others;
    @Column(name="arrears", nullable=false, precision=9)
    private BigDecimal arrears;
    @Column(name="basic", nullable=false, precision=9)
    private BigDecimal basic;
    @Column(name="discount", nullable=false, precision=10, scale=0)
    private BigDecimal discount = BigDecimal.ZERO;
    @Column(name="sys_loss", nullable=false, precision=9)
    private BigDecimal systemLoss;
    @Column(name="dep_fund", nullable=false, precision=9)
    private BigDecimal depreciationFund;
    @JsonSerialize(using= StandardDateTimeSerializer.class)
    @Type(type = "org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    @DateTimeFormat(pattern = "yyyy/MM/dd")
    @Column(name="due_date", nullable=false)
    private DateTime dueDate;
    @Column(name="status", nullable=false)
    @Enumerated(EnumType.STRING)
    private InvoiceStatus status;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="invoice")
    private Set<Payment> payments;

    public Invoice() {
    }

    public Invoice(InvoiceStatus status, DateTime dueDate, BigDecimal depreciationFund, BigDecimal systemLoss, BigDecimal discount, BigDecimal basic, BigDecimal arrears, BigDecimal others, BigDecimal penalty, BigDecimal netCharge, BigDecimal remainingTotal, BigDecimal grossCharge, Schedule schedule, Account account, MeterReading reading) {
        this.status = status;
        this.dueDate = dueDate;
        this.depreciationFund = depreciationFund;
        this.systemLoss = systemLoss;
        this.discount = discount;
        this.basic = basic;
        this.arrears = arrears;
        this.others = others;
        this.penalty = penalty;
        this.netCharge = netCharge;
        this.remainingTotal = remainingTotal;
        this.grossCharge = grossCharge;
        this.schedule = schedule;
        this.account = account;
        this.reading = reading;
    }

    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }

    @JsonInclude(value=JsonInclude.Include.NON_EMPTY, content = JsonInclude.Include.NON_EMPTY)
    public MeterReading getReading() {
        return reading;
    }

    @JsonProperty
    public void setReading(MeterReading reading) {
        this.reading = reading;
    }
    
    @JsonManagedReference
    public Account getAccount() {
        return this.account;
    }
    @JsonProperty
    public void setAccount(Account account) {
        this.account = account;
    }
    
    public BigDecimal getGrossCharge() {
        return this.grossCharge;
    }
    
    public void setGrossCharge(BigDecimal grossCharge) {
        this.grossCharge = grossCharge;
    }

    public BigDecimal getNetCharge() {
        return this.netCharge;
    }
    
    public void setNetCharge(BigDecimal netCharge) {
        this.netCharge = netCharge;
    }

    public BigDecimal getRemainingTotal() {
        return remainingTotal;
    }

    public void setRemainingTotal(BigDecimal remainingTotal) {
        this.remainingTotal = remainingTotal;
    }

    public InvoiceStatus getStatus() {
        return this.status;
    }
    
    public void setStatus(InvoiceStatus status) {
        this.status = status;
    }

    @JsonBackReference
    public Set<Payment> getPayments() {
        return payments;
    }
    @JsonProperty
    public void setPayments(Set<Payment> payments) {
        this.payments = payments;
    }

    @JsonManagedReference
    public Schedule getSchedule() {
        return this.schedule;
    }
    @JsonProperty
    public void setSchedule(Schedule schedule) {
        this.schedule = schedule;
    }

    public BigDecimal getPenalty() {
        return penalty;
    }

    public void setPenalty(BigDecimal penalty) {
        this.penalty = penalty;
    }

    public BigDecimal getOthers() {
        return others;
    }

    public void setOthers(BigDecimal others) {
        this.others = others;
    }

    public BigDecimal getArrears() {
        return arrears;
    }

    public void setArrears(BigDecimal arrears) {
        this.arrears = arrears;
    }

    public DateTime getDueDate() {
        return dueDate;
    }

    public void setDueDate(DateTime dueDate) {
        this.dueDate = dueDate;
    }

    public BigDecimal getBasic() {
        return basic;
    }

    public void setBasic(BigDecimal basic) {
        this.basic = basic;
    }

    public BigDecimal getDiscount() {
        return discount;
    }

    public void setDiscount(BigDecimal discount) {
        this.discount = discount;
    }

    public BigDecimal getSystemLoss() {
        return systemLoss;
    }

    public void setSystemLoss(BigDecimal systemLoss) {
        this.systemLoss = systemLoss;
    }

    public BigDecimal getDepreciationFund() {
        return depreciationFund;
    }

    public void setDepreciationFund(BigDecimal depreciationFund) {
        this.depreciationFund = depreciationFund;
    }

    public BigDecimal getTotalCurrent(){
        return this.depreciationFund.add(this.penalty.add(this.basic.add(this.systemLoss.add(this.others))));
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers
                // if deriving: appendSuper(super.hashCode()).
                        append(this.id).
                        toHashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Invoice other = (Invoice) obj;
        return new EqualsBuilder().
                append(this.id, other.id).
                isEquals();
    }
}