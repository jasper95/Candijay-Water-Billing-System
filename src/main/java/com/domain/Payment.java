package com.domain;
// Generated Apr 16, 2015 12:48:29 PM by Hibernate Tools 4.3.1

import com.dao.util.StandardDateTimeSerializer;
import com.fasterxml.jackson.annotation.*;

import java.math.BigDecimal;
import javax.persistence.*;

import static javax.persistence.GenerationType.IDENTITY;

import javax.validation.constraints.*;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.Type;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;
import org.joda.time.DateTime;
import org.springframework.format.annotation.DateTimeFormat;

/**
 * Payment generated by hbm2java
 */
@Entity
@Table(name="payment")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Payment extends AuditableEntity implements java.io.Serializable {

    @Id @GeneratedValue(strategy=IDENTITY)
    @Column(name="id", unique=true, nullable=false)
    private Long id;
    @ManyToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name="account_id", nullable=false)
    private Account account;
    @ManyToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name="invoice_id", nullable=false)
    private Invoice invoice;
    @ManyToOne(fetch=FetchType.EAGER, cascade={CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name="schedule_id", nullable=false)
    private Schedule schedule;
    @Past(message = "Invalid date")
    @NotNull(message="Invalid date")
    @JsonSerialize(using= StandardDateTimeSerializer.class)
    @Type(type = "org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    @DateTimeFormat(pattern = "yyyy/MM/dd")
    @Column(name="date", nullable=false, length=10)
    private DateTime date;
    @Digits(fraction=2, integer=10, message = "Invalid amount") @NotNull(message="This field is required")
    @Column(name="amount_paid", nullable=false, precision=10, scale=0) @Min(value=1, message = "Invalid amount")
    private BigDecimal amountPaid;
    @Column(name="invoice_total", nullable=false, precision=10, scale=0)
    private BigDecimal invoiceTotal;
    @NotEmpty(message="This field is required") @NotBlank(message="This field is required")
    @Digits(integer = 7, fraction = 0, message = "Invalid format")@Size(max = 7, min = 7, message = "Invalid format")
    @Column(name="or_number", nullable = false)
    private String receiptNumber;
    public Payment() {
    }

    public Payment(Account account, Invoice invoice, Schedule schedule, DateTime date, BigDecimal amountPaid, String receiptNumber, BigDecimal invoiceTotal) {
        this.account = account;
        this.invoice = invoice;
        this.schedule = schedule;
        this.date = date;
        this.amountPaid = amountPaid;
        this.receiptNumber = receiptNumber;
        this.invoiceTotal = invoiceTotal;
    }

    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }

    @JsonManagedReference
    public Account getAccount() {
        return this.account;
    }
    @JsonProperty
    public void setAccount(Account account) {
        this.account = account;
    }
    @JsonManagedReference
    public Invoice getInvoice() {
        return this.invoice;
    }
    @JsonProperty
    public void setInvoice(Invoice invoice) {
        this.invoice = invoice;
    }

    public DateTime getDate() {
        return this.date;
    }
    
    public void setDate(DateTime date) {
        this.date = date;
    }
    
    public BigDecimal getAmountPaid() {
        return this.amountPaid;
    }
    
    public void setAmountPaid(BigDecimal amountPaid) {
        this.amountPaid = amountPaid;
    }

    public BigDecimal getInvoiceTotal() {
        return invoiceTotal;
    }

    public void setInvoiceTotal(BigDecimal invoiceTotal) {
        this.invoiceTotal = invoiceTotal;
    }

    public String getReceiptNumber() { return receiptNumber; }

    public void setReceiptNumber(String receiptNumber) {
        this.receiptNumber = receiptNumber;
    }

    public Schedule getSchedule() {
        return schedule;
    }

    public void setSchedule(Schedule schedule) {
        this.schedule = schedule;
    }

    public String getType(){
        return (this.amountPaid.compareTo(invoiceTotal) >= 0) ? "FULL" : "PARTIAL";
    }

    public BigDecimal getBalance(){
        BigDecimal balance = invoiceTotal.subtract(amountPaid);
        return (balance.compareTo(BigDecimal.ZERO) < 0) ? BigDecimal.ZERO : balance;
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers
                // if deriving: appendSuper(super.hashCode()).
                        append(this.id).
                        toHashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Payment other = (Payment) obj;
        return new EqualsBuilder().
                append(this.id, other.id).
                isEquals();
    }
}